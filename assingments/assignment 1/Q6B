#Q6B
# Bubble sort implementation in RISC-V assembly
    .text
    .globl sort

sort:
    addi sp, sp, -16        # make stack frame
    sw ra, 12(sp)
    sw s0, 8(sp)            # save i
    sw s1, 4(sp)            # save j

    li s0, 0                # i = 0 (outer loop)

outer_loop:
    bge s0, 9, done         # if (i >= 9) exit

    li s1, 0                # j = 0 (inner loop)

inner_loop:
    # check condition j < 10 - i - 1
    li t0, 10
    sub t0, t0, s0          # t0 = 10 - i
    addi t0, t0, -1         # t0 = 10 - i - 1
    bge s1, t0, end_inner   # if j >= limit â†’ exit inner loop

    # load scores[j] into t1
    slli t2, s1, 2          # t2 = j * 4
    add t2, a0, t2
    lw t1, 0(t2)            # t1 = scores[j]

    # load scores[j+1] into t3
    addi t3, s1, 1          # j+1
    slli t3, t3, 2
    add t3, a0, t3
    lw t4, 0(t3)            # t4 = scores[j+1]

    # compare scores[j] > scores[j+1]
    ble t1, t4, no_swap

    # swap
    sw t4, 0(t2)            # scores[j] = t4
    sw t1, 0(t3)            # scores[j+1] = t1

no_swap:
    addi s1, s1, 1          # j++
    j inner_loop

end_inner:
    addi s0, s0, 1          # i++
    j outer_loop

done:
    lw ra, 12(sp)           # restore registers
    lw s0, 8(sp)
    lw s1, 4(sp)
    addi sp, sp, 16
    jr ra
