#Q4A
# Recursive function implementation in RISC-V assembly

    .text
    .globl f
    .align 2

f:
    addi sp, sp, -16        # allocate 16 bytes stack frame
    sw ra, 12(sp)           # save return address
    sw s4, 8(sp)            # save s4

    # b = k + 2
    addi s4, a1, 2

    # if (n == 0) b = 10
    beq a0, x0, IFCASE

    # else: b = b + (n*n) + f(n-1, k+1)

    # compute n*n
    mul t0, a0, a0          # t0 = n * n

    # prepare recursive call f(n-1, k+1)
    addi t1, a0, -1         # t1 = n-1
    addi t2, a1, 1          # t2 = k+1
    mv a0, t1               # set argument n
    mv a1, t2               # set argument k
    jal ra, f               # call f(n-1, k+1)

    # result of recursive call now in a0
    add s4, s4, t0          # b = b + n*n
    add s4, s4, a0          # b = b + f(...)

    j ENDIF

IFCASE:
    li s4, 10               # b = 10

ENDIF:
    # return b * k
    mul a0, s4, a1          # a0 = b * k

    # restore and return
    lw ra, 12(sp)           
    lw s4, 8(sp)
    addi sp, sp, 16
    jr ra
